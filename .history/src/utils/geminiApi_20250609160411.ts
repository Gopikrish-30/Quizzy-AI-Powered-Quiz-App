
import { Quiz, Question } from '../types/quiz';

// Interface for Gemini API response
interface GeminiQuestionData {
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface GeminiQuizData {
  questions: GeminiQuestionData[];
}

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// Validate API key
if (!GEMINI_API_KEY) {
  console.error('VITE_GEMINI_API_KEY is not set. Please check your environment variables.');
}

const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

export const generateQuizWithGemini = async (topic: string, numQuestions: number): Promise<Quiz> => {
  if (!GEMINI_API_KEY) {
    throw new Error('Gemini API key is not configured. Please set VITE_GEMINI_API_KEY in your environment variables.');
  }
  const prompt = `Generate a quiz about "${topic}" with exactly ${numQuestions} multiple choice questions. 

For each question, provide:
1. A clear, well-formed question
2. Exactly 4 answer options
3. The index (0-3) of the correct answer
4. A brief explanation of why the answer is correct

Format your response as a valid JSON object with this exact structure:
{
  "questions": [
    {
      "question": "Question text here?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correctAnswer": 0,
      "explanation": "Explanation text here"
    }
  ]
}

Make sure the questions are educational, accurate, and appropriate for the topic. Vary the difficulty from beginner to intermediate level.`;

  const response = await fetch(GEMINI_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    })
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error('Gemini API error response:', errorData);
    throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
  }

  const data = await response.json();
  console.log('Gemini API response:', data);

  const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
  if (!generatedText) {
    throw new Error('No content generated by Gemini API');
  }

  // Parse the JSON response
  const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
  if (!jsonMatch) {
    throw new Error('Could not extract JSON from Gemini response');
  }

  const quizData = JSON.parse(jsonMatch[0]);
  
  // Transform the data to match our Quiz interface
  const questions: Question[] = quizData.questions.map((q: any, index: number) => ({
    id: index + 1,
    question: q.question,
    options: q.options,
    correctAnswer: q.correctAnswer,
    explanation: q.explanation
  }));

  return {
    id: Date.now().toString(),
    title: `${topic} Quiz`,
    topic,
    questions,
    totalQuestions: questions.length
  };
};

export const generateQuizFromPDFWithGemini = async (text: string, numQuestions: number, fileName: string): Promise<Quiz> => {
  if (!GEMINI_API_KEY) {
    throw new Error('Gemini API key is not configured. Please set VITE_GEMINI_API_KEY in your environment variables.');
  }

  // Limit text length to avoid API limits
  const maxTextLength = 10000;
  const truncatedText = text.length > maxTextLength ? text.substring(0, maxTextLength) + "..." : text;
  
  const prompt = `Based on the following document content, generate a quiz with exactly ${numQuestions} multiple choice questions.

Document content:
"${truncatedText}"

For each question, provide:
1. A clear, well-formed question based on the document content
2. Exactly 4 answer options
3. The index (0-3) of the correct answer
4. A brief explanation referencing the document

Format your response as a valid JSON object with this exact structure:
{
  "questions": [
    {
      "question": "Question text here?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correctAnswer": 0,
      "explanation": "Explanation text here"
    }
  ]
}

Make sure the questions test comprehension of the document content and are factually accurate based on the provided text.`;

  const response = await fetch(GEMINI_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    })
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error('Gemini API error response:', errorData);
    throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
  }

  const data = await response.json();
  const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
  
  if (!generatedText) {
    throw new Error('No content generated by Gemini API');
  }

  // Parse the JSON response
  const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
  if (!jsonMatch) {
    throw new Error('Could not extract JSON from Gemini response');
  }

  const quizData = JSON.parse(jsonMatch[0]);
  
  // Transform the data to match our Quiz interface
  const questions: Question[] = quizData.questions.map((q: any, index: number) => ({
    id: index + 1,
    question: q.question,
    options: q.options,
    correctAnswer: q.correctAnswer,
    explanation: q.explanation
  }));

  return {
    id: Date.now().toString(),
    title: `Quiz from ${fileName}`,
    topic: fileName.replace('.pdf', ''),
    questions,
    totalQuestions: questions.length
  };
};
